schema {
  query: SchemaQuery
  mutation: SchemaMutation
}

union AddTagResponse = AddTagSuccess | InvalidInputError | EnvironmentNotFoundError

type AddTagSuccess implements Success {
  message: String!
}

type BuilderError implements Error {
  message: String!
}

type CreateEnvironmentSuccess implements Success {
  message: String!
}

union CreateResponse = CreateEnvironmentSuccess | InvalidInputError | EnvironmentAlreadyExistsError | BuilderError

"""Date with time (isoformat)"""
scalar DateTime

type DeleteEnvironmentSuccess implements Success {
  message: String!
}

union DeleteResponse = DeleteEnvironmentSuccess | EnvironmentNotFoundError

type Environment {
  id: String!
  name: String!
  path: String!
  description: String!
  readme: String!
  type: Type!
  packages: [Package!]!
  state: State
  tags: [String!]!
  requested: DateTime
  buildStart: DateTime
  buildDone: DateTime
  avgWaitSecs: Float
}

type EnvironmentAlreadyExistsError implements Error {
  message: String!
  path: String!
  name: String!
}

input EnvironmentInput {
  name: String!
  path: String!
  description: String!
  packages: [PackageInput!]!
  tags: [String!] = null
}

type EnvironmentNotFoundError implements Error {
  message: String!
  path: String!
  name: String!
}

interface Error {
  message: String!
}

type Group {
  name: String!
}

type InvalidInputError implements Error {
  message: String!
}

type Package {
  name: String!
  version: String
}

input PackageInput {
  name: String!
  version: String = null
}

type PackageMultiVersion {
  name: String!
  versions: [String!]!
}

type SchemaMutation {
  createEnvironment(env: EnvironmentInput!): CreateResponse!
  deleteEnvironment(name: String!, path: String!): DeleteResponse!
  addTag(name: String!, path: String!, tag: String!): AddTagResponse!
  createFromModule(file: Upload!, modulePath: String!, environmentPath: String!): CreateResponse!
  updateFromModule(file: Upload!, modulePath: String!, environmentPath: String!): UpdateResponse!
}

type SchemaQuery {
  environments: [Environment!]!
  packageCollections: [PackageMultiVersion!]!
  groups(username: String!): [Group!]!
}

enum State {
  ready
  queued
  failed
}

interface Success {
  message: String!
}

enum Type {
  softpack
  module
}

type UpdateEnvironmentSuccess implements Success {
  message: String!
}

union UpdateResponse = UpdateEnvironmentSuccess | InvalidInputError | EnvironmentNotFoundError

scalar Upload
